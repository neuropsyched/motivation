%%                   Initialize Variables
%%%%%%%%%%%%%%%%
%% import LFP data
clear; clc
info = motiv_prepinfo;
[xlpath,xlname,xlext] = fileparts('~/Documents/Projects/ECoG Electrode Keys.xlsx');
xlsheet = info.patientname(3:end);
try
    [~, ~, Labels] = xlsread(fullfile(xlpath,[xlname,xlext]),xlsheet);
    info.labels = Labels(4:129,2);
    info.labels(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),info.labels)) = {''};
catch
end
clear xl*
% IDs=[1:64,129:160,257:288];
% info.ch=IDs(:);
info.fs=1000;
info.nev = info.TrellisFilenames(~cellfun(@isempty,strfind(info.TrellisFilenames,'.nev')));
info.ns2 = info.TrellisFilenames(~cellfun(@isempty,strfind(info.TrellisFilenames,'.ns2')));
info.ns5 = info.TrellisFilenames(~cellfun(@isempty,strfind(info.TrellisFilenames,'.ns5')));

%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[datastruct] = motiv_getfiledata(info); % block=3; ID=[]; 

%% define the bad channels
datastruct.nfs = 1200;
ch = datastruct.ChannelIDs;
for f = 1:length(datastruct.FileNames)
    % f=1; % file index
    filt=datastruct.filtdata{f};
    V=var(filt);
    figure;
    scatter(1:length(ch),V)
    keyboard
    datastruct.badch{f}=[29 30 31 32];
end
clear V f filt ch ans
%% referencing
for f = 1:length(datastruct.FileNames);
    ch = datastruct.ChannelIDs;
    nfs = datastruct.nfs;
    badch = datastruct.badch{f};
    filt=datastruct.filtdata{f};
    % signal=bsxfun(@minus,filt,mean(filt(:,setdiff(1:length(ch),badch)),2));
    % eegplot(eegfilt(signal',fs,1,0),'srate',fs)
    signal=bsxfun(@minus,filt(:,setdiff(1:length(ch),badch)),mean(filt(:,setdiff(1:length(ch),badch)),2));
    eegplot(signal','srate',nfs,'title',datastruct.FileNames{f});
    datastruct.signal{f}=signal;
    keyboard
end
%% import NO data
input={'CRAW', 'CMacro_LFP'};
output={'Raw','LFP'};
for f = 1:length(datastruct.FileNames)
    sides = {'Left' 'Right'};
    cd([datastruct.info.patientdir '/NeurOmega/' sides{f}])
    mat_files = dir('*.mat');
    [Rec] = ReadNeuroOmega_AA(input, output, mat_files);
    datastruct.Rec{f} = Rec;
    clear Rec mat_files
end

% fName = fullfile(datastruct.info.patientdir,[datastruct.info.patientname '_NO_Rec_raw.mat']);
% save('datastruct2.mat','datastruct','-v7.3')
clear input output mat_files fName

%% preprocess NO data 
Filters = load(fullfile(datastruct.info.projroot,'Filters/44kfilters.mat'));
lp1200_44k = Filters.lp1200_44k;
lp500_4k = Filters.lp500_4k;
nfs = datastruct.nfs;
% Raw data
parpool(8)
for f = 1:length(datastruct.FileNames);
    Rec = datastruct.Rec{f};
    filt_raw = cell(size(Rec)); filt_lfp = cell(size(Rec)); 
    srmic=2e3;
        
    % Micro Raw
    parfor i =1:length(Rec)
        tmp=bsxfun(@minus,Rec(i).Raw.ts,mean(Rec(i).Raw.ts,2))';
        plot_fft(Rec(i).Raw.ts(1,:),Rec(i).Raw.sr);
        hold on
        tmp=unpowerline(tmp,Rec(i).Raw.sr,1);
        plot_fft(tmp(1,:),Rec(i).Raw.sr);
        
        tmp=filtfilt(lp1200_44k,tmp);
        
        ds=downsample(tmp,11);
        tmp=filtfilt(lp500_4k,ds);
        plot_fft(tmp(1,:),Rec(i).Raw.sr/11);
        
        ds=downsample(tmp,2);
        filt_raw{i}=ds;
    end
    datastruct.filt_Raw{f}=filt_raw;
end
for f = 1:length(datastruct.FileNames);
    Rec = datastruct.Rec{f};
    filt_raw = cell(size(Rec)); filt_lfp = cell(size(Rec)); 
    srmic=2e3;
    % Macro LFP data
    for i =1: length(Rec)
        tmp=bsxfun(@minus,Rec(i).LFP.ts,mean(Rec(i).LFP.ts,2))';
        tmp=unpowerline(tmp,Rec(i).LFP.sr,1);
        filt_lfp{i}=resample(tmp,nfs,1375)';
    end
    datastruct.filt_LFP{f}=filt_lfp;
    datastruct.srmic{f}=srmic;

end
save('datastruct2.mat','datastruct','-v7.3')
%% Align ECOG and NO 
nfs = datastruct.nfs;
for f = 1:length(datastruct.Rec)
    Rec = datastruct.Rec{f};
    filt = datastruct.filtdata{f};
    %
    fileName = fullfile(datastruct.info.trellispath,char(datastruct.info.nev{f}));
    [EventTimesTrellis] = GetEventData(fileName); % trellis time stamps     
    
    h = figure; plot(EventTimesTrellis*[1 1],ylim)
    disp(['Displaying EventTimes for datfile' datastruct.FileNames{f}])
    title(['datfile' num2str(datastruct.FileNames{f})])
    waitfor(h) % pause while figure is open
    
    disp('Choose start and stop times')
    % visually identify T0 / T1 in Trellis as the start / end of segment of interest
    T0 = str2double(strsplit(cell2mat(inputdlg('Enter start times (space delimited)')),' '));
    T0 = T0(end:-1:1); %Reverse order to match Rec

    for idx=1:length(Rec)
        EventTimesNO{idx} = sort([Rec(idx).DigUp Rec(idx).DigDown])';  % NO event times
        % h=figure('windowstyle','docked'); plot(EventTimesNO{idx}*[1 1],ylim); title('EventTimesNO');
        % h=figure('windowstyle','docked'); plot(EventTimesTrellis*[1 1],ylim); title('EventTimesTrellis');
        
        Event0 = EventTimesTrellis(find(EventTimesTrellis>T0(idx),1,'first'));
        tstart(idx)= Event0 - EventTimesNO{idx}(1);
        try
            tend(idx) = tstart(idx) + length(Rec(idx).Raw.ts)/Rec(idx).Raw.sr; % 5 secs after last time stamp
            E{idx} = filt(round(tstart(idx)*nfs):round(tend(idx)*nfs),:);
        catch
            tend(idx) = tstart(idx) + EventTimesNO{idx}(end)+10; % 5 secs after last time stamp
            E{idx} = filt(round(tstart(idx)*nfs):round(tend(idx)*nfs),:);
        end
    end
    datastruct.EventTimesTrellis{f} = EventTimesTrellis;
    datastruct.EventTimesNO{f} = EventTimesNO;
    datastruct.E{f} = E;
    clear EventTimesTrellis EventTimesNO E
end

save('datastruct3.mat','datastruct','-v7.3')
% filtered_data = datastruct.E;
% save('filtered_data_aligned.mat','filtered_data')

%% Align responses
trialskips=1;
skips=7;
info = datastruct.info;
try 
    [subdir,~] = dirdir(info.patientdir);
    subdir = subdir(~cellfun(@isempty,strfind(lower(subdir),'matlab')));
    cd(char(fullfile(info.patientdir,subdir)))
catch
end
info.MTdir = char(fullfile(info.patientdir,subdir));
[~,files] = dirdir(info.MTdir);
files = files(~cellfun(@isempty,strfind(files,'intraop')));
files = files(~cellfun(@isempty,strfind(files,'.txt')));

for f=1:length(datastruct.FileNames);
MT_files = files(listdlg('PromptString',['Choose Text Files for: ' datastruct.FileNames{f}],...
    'SelectionMode','multiple','ListSize',[450 300],'ListString',files));
info.MT_files{f} = MT_files;
end

try
    celldata=BilateralDelayMotivationTaskIntraop;
    task=1;
catch
    celldata=BilateralDelayGripTaskIntraop;
    task=2;
end
celldata(trialskips,:)=[];
%Indexing event times
%Get BilateralDelayMotivationTaskIntraopData using import from txt
[CueStimulusTimes, CueStimulusDuration, ~, ~] = MotivationTaskStimulusBlock(EventTimes, skips, 4, 1, celldata);
[CommandStimulusTimes,~, CommandTrial, ~] = MotivationTaskStimulusBlock(EventTimes, skips, 4, 2, celldata);
[FeedbackStimulusTimes, ~, ~, ~] = MotivationTaskStimulusBlock(EventTimes, skips, 4, 3, celldata);
[ITIStimulusTimes, ITIStimulusDuration, ~, ~] = MotivationTaskStimulusBlock(EventTimes, skips, 4, 4, celldata);
switch task
    case 1
        RGC=intersect(CommandTrial.Correct,intersect(CommandTrial.Right,CommandTrial.Go));
        LGC=intersect(CommandTrial.Correct,intersect(CommandTrial.Left,CommandTrial.Go));
        RNGC=intersect(CommandTrial.Correct,intersect(CommandTrial.Right,CommandTrial.NoGo));
        LNGC=intersect(CommandTrial.Correct,intersect(CommandTrial.Left,CommandTrial.NoGo));
    case 2
        RGC=intersect(CommandTrial.Correct,intersect(CommandTrial.Right,CommandTrial.Go));
        RGC=cat(2,RGC, intersect(CommandTrial.Correct,intersect(CommandTrial.Right,CommandTrial.GoFast)));
        LGC=intersect(CommandTrial.Correct,intersect(CommandTrial.Left,CommandTrial.Go));
        LGC=cat(2,LGC, intersect(CommandTrial.Correct,intersect(CommandTrial.Left,CommandTrial.GoFast)));
        RNGC=intersect(CommandTrial.Correct,intersect(CommandTrial.Right,CommandTrial.NoGo));
        LNGC=intersect(CommandTrial.Correct,intersect(CommandTrial.Left,CommandTrial.NoGo));
end
RNGC=setdiff(RNGC,1);
LNGC=setdiff(LNGC,1);
RGC=setdiff(RGC,1);
LGC=setdiff(LGC,1);

for i=1:length(RGC)
    try
        RGCR(i,1)=     RightResponseTimes(intersect(find(RightResponseTimes> fs*CommandStimulusTimes(RGC(i))),find( RightResponseTimes < fs*CommandStimulusTimes(RGC(i))+ 2*fs)));
    catch
        RGCR(i)=0;
    end
end
RGC=RGC(RGCR>0);
RGCR=RGCR(RGCR>0)./fs;
for i=1:length(LGC)
    try
        LGCR(i,1)=     LeftResponseTimes(intersect(find(LeftResponseTimes> fs*CommandStimulusTimes(LGC(i))),find( LeftResponseTimes < fs*CommandStimulusTimes(LGC(i))+ 2*fs)));
    catch
        LGCR(i)=0;
    end
end
LGC=LGC(LGCR>0);
LGCR=LGCR(LGCR>0)./fs;

